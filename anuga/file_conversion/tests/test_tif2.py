from builtins import str
import unittest
import copy
import os
import numpy as num
from pprint import pprint


from anuga.file_conversion.tif2array import tif2array
from anuga.file_conversion.tif2point_values import tif2point_values


def make_a_utm_tif(south=True):
    # We need to make a .tif to test some functions
    # This does the job
    #
    from anuga.utilities import plot_utils as util
    import numpy
    
    if south==True:
        # Use Make_Geotif to make tif file
        # Pick a domain that makes sense in EPSG:32756
        # WGS 84 / UTM zone 56 South
        x = numpy.linspace(307000., 307100., 101)
        y = numpy.linspace(6193000., 6193100., 101)
        xG, yG = numpy.meshgrid(x, y)
        xG = xG.flatten()
        yG = yG.flatten()
        # Surface is z=x+y
        fakeZ = xG-min(xG)+yG - min(yG)
        dataToGrid = numpy.vstack([xG, yG, fakeZ]).transpose()
        #
        util.Make_Geotif(dataToGrid, output_quantities=['test_utm'],
                        EPSG_CODE=32756, output_dir='.', CellSize=1.0)
    
    if south==False:
        # Use Make_Geotif to make tif file
        # Pick a domain that makes sense in EPSG:32656
        # WGS 84 / UTM zone 56 North
        x = numpy.linspace(307000., 307100., 101)
        y = numpy.linspace(6193000., 6193100., 101)
        xG, yG = numpy.meshgrid(x, y)
        xG = xG.flatten()
        yG = yG.flatten()
        # Surface is z=x+y
        fakeZ = xG-min(xG)+yG - min(yG)
        dataToGrid = numpy.vstack([xG, yG, fakeZ]).transpose()
        #
        util.Make_Geotif(dataToGrid, output_quantities=['test_utm'],
                        EPSG_CODE=32656, output_dir='.', CellSize=1.0)


def make_a_ll_tif():
    # We need to make a .tif with ll coord to test some functions
    #
    from anuga.utilities import plot_utils as util
    import numpy
    #
    # Use Make_Geotif to make tif file
    # Pick a domain that makes sense in EPSG:32756 (zone 56, south=True)
    lat = numpy.linspace(-34.39, -34.37, 101)
    lon = numpy.linspace(150.90, 150.92, 101)

    xG, yG = numpy.meshgrid(lon, lat)
    xG = xG.flatten()
    yG = yG.flatten()
    # Surface is z=x+y

    fakeZ = (xG-min(xG))/(max(xG)-min(xG))+(yG - min(yG))/(max(yG)-min(yG))
    dataToGrid = numpy.vstack([xG, yG, fakeZ]).transpose()
    #
    # Create file PointData_test_ll.tif
    util.Make_Geotif(dataToGrid, output_quantities=['test_ll'],
                     EPSG_CODE=4326, output_dir='.', CellSize=0.0001)


class Test_tif2(unittest.TestCase):

    def test_tif2array_utm_south(self):

        import os
        import numpy
        from anuga.file_conversion.tif2array import  tif2array

        # makes a file Point_Data_test_utm.tif
        # which contains UTM easting, northing data for 
        # WGS 84 / UTM zone 56 South
        make_a_utm_tif(south=True)

        x, y, Z = tif2array('PointData_test_utm.tif')

        x_exact = numpy.array([306999.5, 307000.5, 307001.5, 307002.5, 307003.5, 307004.5,
                               307005.5, 307006.5, 307007.5, 307008.5, 307009.5, 307010.5,
                               307011.5, 307012.5, 307013.5, 307014.5, 307015.5, 307016.5,
                               307017.5, 307018.5, 307019.5, 307020.5, 307021.5, 307022.5,
                               307023.5, 307024.5, 307025.5, 307026.5, 307027.5, 307028.5,
                               307029.5, 307030.5, 307031.5, 307032.5, 307033.5, 307034.5,
                               307035.5, 307036.5, 307037.5, 307038.5, 307039.5, 307040.5,
                               307041.5, 307042.5, 307043.5, 307044.5, 307045.5, 307046.5,
                               307047.5, 307048.5, 307049.5, 307050.5, 307051.5, 307052.5,
                               307053.5, 307054.5, 307055.5, 307056.5, 307057.5, 307058.5,
                               307059.5, 307060.5, 307061.5, 307062.5, 307063.5, 307064.5,
                               307065.5, 307066.5, 307067.5, 307068.5, 307069.5, 307070.5,
                               307071.5, 307072.5, 307073.5, 307074.5, 307075.5, 307076.5,
                               307077.5, 307078.5, 307079.5, 307080.5, 307081.5, 307082.5,
                               307083.5, 307084.5, 307085.5, 307086.5, 307087.5, 307088.5,
                               307089.5, 307090.5, 307091.5, 307092.5, 307093.5, 307094.5,
                               307095.5, 307096.5, 307097.5, 307098.5, 307099.5])

        y_exact = numpy.array([6193000.5, 6193001.5, 6193002.5, 6193003.5, 6193004.5, 6193005.5,
                               6193006.5, 6193007.5, 6193008.5, 6193009.5, 6193010.5, 6193011.5,
                               6193012.5, 6193013.5, 6193014.5, 6193015.5, 6193016.5, 6193017.5,
                               6193018.5, 6193019.5, 6193020.5, 6193021.5, 6193022.5, 6193023.5,
                               6193024.5, 6193025.5, 6193026.5, 6193027.5, 6193028.5, 6193029.5,
                               6193030.5, 6193031.5, 6193032.5, 6193033.5, 6193034.5, 6193035.5,
                               6193036.5, 6193037.5, 6193038.5, 6193039.5, 6193040.5, 6193041.5,
                               6193042.5, 6193043.5, 6193044.5, 6193045.5, 6193046.5, 6193047.5,
                               6193048.5, 6193049.5, 6193050.5, 6193051.5, 6193052.5, 6193053.5,
                               6193054.5, 6193055.5, 6193056.5, 6193057.5, 6193058.5, 6193059.5,
                               6193060.5, 6193061.5, 6193062.5, 6193063.5, 6193064.5, 6193065.5,
                               6193066.5, 6193067.5, 6193068.5, 6193069.5, 6193070.5, 6193071.5,
                               6193072.5, 6193073.5, 6193074.5, 6193075.5, 6193076.5, 6193077.5,
                               6193078.5, 6193079.5, 6193080.5, 6193081.5, 6193082.5, 6193083.5,
                               6193084.5, 6193085.5, 6193086.5, 6193087.5, 6193088.5, 6193089.5,
                               6193090.5, 6193091.5, 6193092.5, 6193093.5, 6193094.5, 6193095.5,
                               6193096.5, 6193097.5, 6193098.5, 6193099.5, 6193100.5])

        Z_row_11 = numpy.array([11.,  12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.,  20.,  21.,
                                22.,  23.,  24.,  25.,  26.,  27.,  28.,  29.,  30.,  31.,  32.,
                                33.,  34.,  35.,  36.,  37.,  38.,  39.,  40.,  41.,  42.,  43.,
                                44.,  45.,  46.,  47.,  48.,  49.,  50.,  51.,  52.,  53.,  54.,
                                55.,  56.,  57.,  58.,  59.,  60.,  61.,  62.,  63.,  64.,  65.,
                                66.,  67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  75.,  76.,
                                77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  85.,  86.,  87.,
                                88.,  89.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,
                                99., 100., 101., 102., 103., 104., 105., 106., 107., 108., 109.,
                                110., 111.])

        assert numpy.allclose(x,x_exact)
        assert numpy.allclose(y,y_exact)

        assert numpy.allclose(Z[11,:],Z_row_11)


        os.remove('PointData_test_utm.tif')

    def test_tif2array_utm_north(self):

        import os
        import numpy
        from anuga.file_conversion.tif2array import  tif2array

        # makes a file Point_Data_test_utm.tif
        # which contains UTM easting, northing data for 
        # WGS 84 / UTM zone 56 South
        make_a_utm_tif(south=False)

        x, y, Z = tif2array('PointData_test_utm.tif')

        x_exact = numpy.array([306999.5, 307000.5, 307001.5, 307002.5, 307003.5, 307004.5,
                               307005.5, 307006.5, 307007.5, 307008.5, 307009.5, 307010.5,
                               307011.5, 307012.5, 307013.5, 307014.5, 307015.5, 307016.5,
                               307017.5, 307018.5, 307019.5, 307020.5, 307021.5, 307022.5,
                               307023.5, 307024.5, 307025.5, 307026.5, 307027.5, 307028.5,
                               307029.5, 307030.5, 307031.5, 307032.5, 307033.5, 307034.5,
                               307035.5, 307036.5, 307037.5, 307038.5, 307039.5, 307040.5,
                               307041.5, 307042.5, 307043.5, 307044.5, 307045.5, 307046.5,
                               307047.5, 307048.5, 307049.5, 307050.5, 307051.5, 307052.5,
                               307053.5, 307054.5, 307055.5, 307056.5, 307057.5, 307058.5,
                               307059.5, 307060.5, 307061.5, 307062.5, 307063.5, 307064.5,
                               307065.5, 307066.5, 307067.5, 307068.5, 307069.5, 307070.5,
                               307071.5, 307072.5, 307073.5, 307074.5, 307075.5, 307076.5,
                               307077.5, 307078.5, 307079.5, 307080.5, 307081.5, 307082.5,
                               307083.5, 307084.5, 307085.5, 307086.5, 307087.5, 307088.5,
                               307089.5, 307090.5, 307091.5, 307092.5, 307093.5, 307094.5,
                               307095.5, 307096.5, 307097.5, 307098.5, 307099.5])

        y_exact = numpy.array([6193000.5, 6193001.5, 6193002.5, 6193003.5, 6193004.5, 6193005.5,
                               6193006.5, 6193007.5, 6193008.5, 6193009.5, 6193010.5, 6193011.5,
                               6193012.5, 6193013.5, 6193014.5, 6193015.5, 6193016.5, 6193017.5,
                               6193018.5, 6193019.5, 6193020.5, 6193021.5, 6193022.5, 6193023.5,
                               6193024.5, 6193025.5, 6193026.5, 6193027.5, 6193028.5, 6193029.5,
                               6193030.5, 6193031.5, 6193032.5, 6193033.5, 6193034.5, 6193035.5,
                               6193036.5, 6193037.5, 6193038.5, 6193039.5, 6193040.5, 6193041.5,
                               6193042.5, 6193043.5, 6193044.5, 6193045.5, 6193046.5, 6193047.5,
                               6193048.5, 6193049.5, 6193050.5, 6193051.5, 6193052.5, 6193053.5,
                               6193054.5, 6193055.5, 6193056.5, 6193057.5, 6193058.5, 6193059.5,
                               6193060.5, 6193061.5, 6193062.5, 6193063.5, 6193064.5, 6193065.5,
                               6193066.5, 6193067.5, 6193068.5, 6193069.5, 6193070.5, 6193071.5,
                               6193072.5, 6193073.5, 6193074.5, 6193075.5, 6193076.5, 6193077.5,
                               6193078.5, 6193079.5, 6193080.5, 6193081.5, 6193082.5, 6193083.5,
                               6193084.5, 6193085.5, 6193086.5, 6193087.5, 6193088.5, 6193089.5,
                               6193090.5, 6193091.5, 6193092.5, 6193093.5, 6193094.5, 6193095.5,
                               6193096.5, 6193097.5, 6193098.5, 6193099.5, 6193100.5])

        Z_row_11 = numpy.array([11.,  12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.,  20.,  21.,
                                22.,  23.,  24.,  25.,  26.,  27.,  28.,  29.,  30.,  31.,  32.,
                                33.,  34.,  35.,  36.,  37.,  38.,  39.,  40.,  41.,  42.,  43.,
                                44.,  45.,  46.,  47.,  48.,  49.,  50.,  51.,  52.,  53.,  54.,
                                55.,  56.,  57.,  58.,  59.,  60.,  61.,  62.,  63.,  64.,  65.,
                                66.,  67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  75.,  76.,
                                77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  85.,  86.,  87.,
                                88.,  89.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,
                                99., 100., 101., 102., 103., 104., 105., 106., 107., 108., 109.,
                                110., 111.])

        assert numpy.allclose(x,x_exact)
        assert numpy.allclose(y,y_exact)

        assert numpy.allclose(Z[11,:],Z_row_11)


        os.remove('PointData_test_utm.tif')

    def test_tif2array_ll(self):

        import os
        import numpy
        from anuga.file_conversion.tif2array import  tif2array

        # makes a file Point_Data_test_utm.tif
        # which contains UTM easting, northing data for 
        # WGS 84 / UTM zone 56 South
        make_a_ll_tif()

        x, y, Z = tif2array('PointData_test_ll.tif')

        #pprint(x)
        #pprint(y)

        y_exact = numpy.array([-34.38995, -34.38985, -34.38975, -34.38965, -34.38955, -34.38945,
                               -34.38935, -34.38925, -34.38915, -34.38905, -34.38895, -34.38885,
                               -34.38875, -34.38865, -34.38855, -34.38845, -34.38835, -34.38825,
                               -34.38815, -34.38805, -34.38795, -34.38785, -34.38775, -34.38765,
                               -34.38755, -34.38745, -34.38735, -34.38725, -34.38715, -34.38705,
                               -34.38695, -34.38685, -34.38675, -34.38665, -34.38655, -34.38645,
                               -34.38635, -34.38625, -34.38615, -34.38605, -34.38595, -34.38585,
                               -34.38575, -34.38565, -34.38555, -34.38545, -34.38535, -34.38525,
                               -34.38515, -34.38505, -34.38495, -34.38485, -34.38475, -34.38465,
                               -34.38455, -34.38445, -34.38435, -34.38425, -34.38415, -34.38405,
                               -34.38395, -34.38385, -34.38375, -34.38365, -34.38355, -34.38345,
                               -34.38335, -34.38325, -34.38315, -34.38305, -34.38295, -34.38285,
                               -34.38275, -34.38265, -34.38255, -34.38245, -34.38235, -34.38225,
                               -34.38215, -34.38205, -34.38195, -34.38185, -34.38175, -34.38165,
                               -34.38155, -34.38145, -34.38135, -34.38125, -34.38115, -34.38105,
                               -34.38095, -34.38085, -34.38075, -34.38065, -34.38055, -34.38045,
                               -34.38035, -34.38025, -34.38015, -34.38005, -34.37995, -34.37985,
                               -34.37975, -34.37965, -34.37955, -34.37945, -34.37935, -34.37925,
                               -34.37915, -34.37905, -34.37895, -34.37885, -34.37875, -34.37865,
                               -34.37855, -34.37845, -34.37835, -34.37825, -34.37815, -34.37805,
                               -34.37795, -34.37785, -34.37775, -34.37765, -34.37755, -34.37745,
                               -34.37735, -34.37725, -34.37715, -34.37705, -34.37695, -34.37685,
                               -34.37675, -34.37665, -34.37655, -34.37645, -34.37635, -34.37625,
                               -34.37615, -34.37605, -34.37595, -34.37585, -34.37575, -34.37565,
                               -34.37555, -34.37545, -34.37535, -34.37525, -34.37515, -34.37505,
                               -34.37495, -34.37485, -34.37475, -34.37465, -34.37455, -34.37445,
                               -34.37435, -34.37425, -34.37415, -34.37405, -34.37395, -34.37385,
                               -34.37375, -34.37365, -34.37355, -34.37345, -34.37335, -34.37325,
                               -34.37315, -34.37305, -34.37295, -34.37285, -34.37275, -34.37265,
                               -34.37255, -34.37245, -34.37235, -34.37225, -34.37215, -34.37205,
                               -34.37195, -34.37185, -34.37175, -34.37165, -34.37155, -34.37145,
                               -34.37135, -34.37125, -34.37115, -34.37105, -34.37095, -34.37085,
                               -34.37075, -34.37065, -34.37055, -34.37045, -34.37035, -34.37025,
                               -34.37015, -34.37005, -34.36995])

        x_exact = numpy.array([150.89995, 150.90005, 150.90015, 150.90025, 150.90035, 150.90045,
                               150.90055, 150.90065, 150.90075, 150.90085, 150.90095, 150.90105,
                               150.90115, 150.90125, 150.90135, 150.90145, 150.90155, 150.90165,
                               150.90175, 150.90185, 150.90195, 150.90205, 150.90215, 150.90225,
                               150.90235, 150.90245, 150.90255, 150.90265, 150.90275, 150.90285,
                               150.90295, 150.90305, 150.90315, 150.90325, 150.90335, 150.90345,
                               150.90355, 150.90365, 150.90375, 150.90385, 150.90395, 150.90405,
                               150.90415, 150.90425, 150.90435, 150.90445, 150.90455, 150.90465,
                               150.90475, 150.90485, 150.90495, 150.90505, 150.90515, 150.90525,
                               150.90535, 150.90545, 150.90555, 150.90565, 150.90575, 150.90585,
                               150.90595, 150.90605, 150.90615, 150.90625, 150.90635, 150.90645,
                               150.90655, 150.90665, 150.90675, 150.90685, 150.90695, 150.90705,
                               150.90715, 150.90725, 150.90735, 150.90745, 150.90755, 150.90765,
                               150.90775, 150.90785, 150.90795, 150.90805, 150.90815, 150.90825,
                               150.90835, 150.90845, 150.90855, 150.90865, 150.90875, 150.90885,
                               150.90895, 150.90905, 150.90915, 150.90925, 150.90935, 150.90945,
                               150.90955, 150.90965, 150.90975, 150.90985, 150.90995, 150.91005,
                               150.91015, 150.91025, 150.91035, 150.91045, 150.91055, 150.91065,
                               150.91075, 150.91085, 150.91095, 150.91105, 150.91115, 150.91125,
                               150.91135, 150.91145, 150.91155, 150.91165, 150.91175, 150.91185,
                               150.91195, 150.91205, 150.91215, 150.91225, 150.91235, 150.91245,
                               150.91255, 150.91265, 150.91275, 150.91285, 150.91295, 150.91305,
                               150.91315, 150.91325, 150.91335, 150.91345, 150.91355, 150.91365,
                               150.91375, 150.91385, 150.91395, 150.91405, 150.91415, 150.91425,
                               150.91435, 150.91445, 150.91455, 150.91465, 150.91475, 150.91485,
                               150.91495, 150.91505, 150.91515, 150.91525, 150.91535, 150.91545,
                               150.91555, 150.91565, 150.91575, 150.91585, 150.91595, 150.91605,
                               150.91615, 150.91625, 150.91635, 150.91645, 150.91655, 150.91665,
                               150.91675, 150.91685, 150.91695, 150.91705, 150.91715, 150.91725,
                               150.91735, 150.91745, 150.91755, 150.91765, 150.91775, 150.91785,
                               150.91795, 150.91805, 150.91815, 150.91825, 150.91835, 150.91845,
                               150.91855, 150.91865, 150.91875, 150.91885, 150.91895, 150.91905,
                               150.91915, 150.91925, 150.91935, 150.91945, 150.91955, 150.91965,
                               150.91975, 150.91985, 150.91995])

        #pprint(Z[11, :])
        Z_row_11 = numpy.array([0.05774116, 0.06, 0.06225884, 0.07333333, 0.07408628,
                                0.08333334, 0.08225884, 0.09333333, 0.09591372, 0.1,
                                0.10225884, 0.11333334, 0.11225884, 0.12333333, 0.12408628,
                                0.12666667, 0.13591371, 0.13666667, 0.14225884, 0.14666666,
                                0.15591373, 0.16, 0.16225883, 0.16666667, 0.17225884,
                                0.18, 0.18591373, 0.18666667, 0.19408628, 0.20333333,
                                0.20225884, 0.21, 0.21591371, 0.22333333, 0.22408628,
                                0.23333333, 0.23225884, 0.24333334, 0.24225885, 0.25,
                                0.25225884, 0.26333332, 0.26225883, 0.27, 0.27591372,
                                0.27666667, 0.28225884, 0.29, 0.29225883, 0.29666665,
                                0.30225885, 0.31, 0.31225884, 0.31666666, 0.32408628,
                                0.32666665, 0.33225885, 0.34, 0.3459137, 0.35333332,
                                0.35408628, 0.36333334, 0.36225885, 0.37333333, 0.37225884,
                                0.38, 0.38225883, 0.39333335, 0.39225885, 0.40333334,
                                0.4040863, 0.41, 0.41591373, 0.41666666, 0.42225885,
                                0.43, 0.4359137, 0.43666667, 0.44408628, 0.44666666,
                                0.45225883, 0.45666668, 0.46225885, 0.46666667, 0.47408628,
                                0.47666666, 0.48225883, 0.49333334, 0.4959137, 0.50333333,
                                0.50408626, 0.5133333, 0.5122588, 0.52, 0.5222588,
                                0.53333336, 0.53225887, 0.54, 0.54225886, 0.5466667,
                                0.55591375, 0.5566667, 0.56225884, 0.56666666, 0.5740863,
                                0.57666665, 0.5822588, 0.59, 0.5959137, 0.5966667,
                                0.6040863, 0.6066667, 0.61225885, 0.62, 0.62591374,
                                0.6333333, 0.63408625, 0.6433333, 0.6422588, 0.6533333,
                                0.6559137, 0.66333336, 0.6640863, 0.67333335, 0.67225885,
                                0.68333334, 0.68591374, 0.6933333, 0.69408625, 0.69666666,
                                0.7059137, 0.70666665, 0.7159137, 0.72, 0.72225887,
                                0.7266667, 0.73225886, 0.7366667, 0.74225885, 0.75,
                                0.75225884, 0.75666666, 0.7622588, 0.7733333, 0.7722588,
                                0.78, 0.7859137, 0.79, 0.79225886, 0.80333334,
                                0.80225885, 0.81, 0.81591374, 0.8233333, 0.8240863,
                                0.8333333, 0.8322588, 0.83666664, 0.8477412, 0.85,
                                0.85225886, 0.8566667, 0.86225885, 0.87, 0.87591374,
                                0.87666667, 0.88408625, 0.88666666, 0.8922588, 0.89666665,
                                0.9059137, 0.91, 0.91225886, 0.92, 0.92225885,
                                0.93333334, 0.93225884, 0.94, 0.94591373, 0.9533333,
                                0.9540863, 0.9633333, 0.9622588, 0.97333336, 0.9740863,
                                0.98, 0.9859137, 0.9866667, 0.99225885, 1.,
                                1.0059137, 1.01, 1.0122589, 1.0166667, 1.0222589,
                                1.0266666, 1.0322589, 1.0366666, 1.0459137, 1.05,
                                1.0522588])

        Z_row_11_win = numpy.array([0.05591372, 0.06333333, 0.06591372, 0.07333333, 0.07408628,
                                    0.08333334, 0.08225884, 0.09333333, 0.09591372, 0.10333333,
                                    0.10408628, 0.11333334, 0.11225884, 0.12333333, 0.12408628,
                                    0.12666667, 0.13591371, 0.13666667, 0.14225884, 0.14666666,
                                    0.15591373, 0.15666667, 0.16408628, 0.16666667, 0.17225884,
                                    0.17666666, 0.18591373, 0.18666667, 0.19408628, 0.20333333,
                                    0.20225884, 0.21333334, 0.21591371, 0.22333333, 0.22408628,
                                    0.23333333, 0.23225884, 0.24333334, 0.24225885, 0.25333333,
                                    0.2540863, 0.26333332, 0.26225883, 0.26666668, 0.27591372,
                                    0.27666667, 0.2859137, 0.28666666, 0.29408628, 0.29666665,
                                    0.30225885, 0.30666667, 0.3159137, 0.31666666, 0.32408628,
                                    0.32666665, 0.33225885, 0.33666667, 0.3459137, 0.35333332,
                                    0.35408628, 0.36333334, 0.36225885, 0.37333333, 0.3759137,
                                    0.38333333, 0.38408628, 0.39333335, 0.39225885, 0.40333334,
                                    0.4040863, 0.40666667, 0.41591373, 0.41666666, 0.42225885,
                                    0.42666668, 0.4359137, 0.43666667, 0.44408628, 0.44666666,
                                    0.45225883, 0.45666668, 0.4659137, 0.46666667, 0.47408628,
                                    0.47666666, 0.48225883, 0.49333334, 0.4959137, 0.50333333,
                                    0.50408626, 0.5133333, 0.5122588, 0.5233333, 0.5259137,
                                    0.53, 0.5359137, 0.54333335, 0.5440863, 0.5466667,
                                    0.55591375, 0.5566667, 0.56591374, 0.56666666, 0.5740863,
                                    0.57666665, 0.5822588, 0.58666664, 0.5959137, 0.5966667,
                                    0.6040863, 0.6066667, 0.61225885, 0.6166667, 0.62591374,
                                    0.6333333, 0.63408625, 0.6433333, 0.6422588, 0.6533333,
                                    0.6559137, 0.66333336, 0.6640863, 0.67333335, 0.67225885,
                                    0.68333334, 0.68591374, 0.6933333, 0.69408625, 0.69666666,
                                    0.7059137, 0.70666665, 0.7159137, 0.71666664, 0.7240863,
                                    0.7266667, 0.73225886, 0.7366667, 0.74591374, 0.74666667,
                                    0.75408626, 0.75666666, 0.7622588, 0.7733333, 0.7759137,
                                    0.78333336, 0.7859137, 0.79, 0.79225886, 0.80333334,
                                    0.80225885, 0.81333333, 0.81591374, 0.8233333, 0.8240863,
                                    0.8333333, 0.8322588, 0.83666664, 0.8459137, 0.8466667,
                                    0.8540863, 0.8566667, 0.86225885, 0.8666667, 0.87591374,
                                    0.87666667, 0.88408625, 0.88666666, 0.8922588, 0.89666665,
                                    0.9059137, 0.9066667, 0.9159137, 0.92333335, 0.9240863,
                                    0.93333334, 0.93225884, 0.9433333, 0.94591373, 0.9533333,
                                    0.9540863, 0.9633333, 0.9622588, 0.97333336, 0.9740863,
                                    0.9766667, 0.9859137, 0.9866667, 0.99225885, 1.,
                                    1.0059137, 1.0066667, 1.0140862, 1.0166667, 1.0222589,
                                    1.0266666, 1.0359137, 1.04, 1.0459137, 1.05,
                                    1.0522588])

        assert numpy.allclose(x,x_exact)
        assert numpy.allclose(y,y_exact)

        assert numpy.allclose(Z[11,:],Z_row_11) or numpy.allclose(Z[11,:],Z_row_11_win)


        os.remove('PointData_test_ll.tif')
        
    def test_tif2point_values_ll(self):

        import os
        import numpy
        from anuga.file_conversion.tif2point_values import tif2point_values

        # makes a file Point_Data_test_ll.tif
        # which contains lat lon data
        make_a_ll_tif()

        x = numpy.linspace(307000., 308000., 11)
        y = numpy.linspace(6193000., 6194000., 11)
        xG, yG = numpy.meshgrid(x, y)
        xG = xG.flatten()
        yG = yG.flatten()
        points = numpy.vstack((xG,yG)).T
        Z = tif2point_values('PointData_test_ll.tif', zone=56, south=True, points = points)

        Z_exact = numpy.array([0.21774116, 0.27, 0.32333332, 0.3740863, 0.42774117,
                               0.48333332, 0.5340863, 0.5933333, 0.64, 0.69225883,
                               0.75, 0.25666666, 0.3159137, 0.36774117, 0.42,
                               0.47591373, 0.53, 0.58, 0.63774115, 0.68774116,
                               0.7366667, 0.79225886, 0.30408627, 0.36, 0.41,
                               0.46225885, 0.52, 0.5759137, 0.62666667, 0.6766667,
                               0.73, 0.78225887, 0.84, 0.35774115, 0.40774116,
                               0.45774117, 0.51, 0.56591374, 0.62, 0.67225885,
                               0.73, 0.78333336, 0.83, 0.88408625, 0.4,
                               0.45591372, 0.50225884, 0.55225885, 0.6066667, 0.6659137,
                               0.72, 0.7722588, 0.8240863, 0.88, 0.93225884,
                               0.44225883, 0.49666667, 0.55225885, 0.60225886, 0.66,
                               0.71, 0.7622588, 0.82, 0.87, 0.92225885,
                               0.9766667, 0.49, 0.54225886, 0.6, 0.65,
                               0.70774114, 0.76, 0.81333333, 0.8640863, 0.9140863,
                               0.97, 1.0222589, 0.54, 0.58666664, 0.6422588,
                               0.69408625, 0.75, 0.80225885, 0.86, 0.91225886,
                               0.9633333, 1.0140862, 1.07, 0.5840863, 0.64,
                               0.69, 0.7366667, 0.79225886, 0.8466667, 0.9059137,
                               0.95666665, 1.01, 1.0677412, 1.1122588, 0.6333333,
                               0.68774116, 0.74, 0.79, 0.84, 0.8922588,
                               0.95, 1.0040863, 1.0540863, 1.1133333, 1.1677412,
                               0.6740863, 0.73, 0.7840863, 0.83774114, 0.8933333,
                               0.94408625, 0.99774116, 1.0533333, 1.1, 1.1559137,
                               1.21])

        Z_exact_win = numpy.array([0.21591371, 0.27, 0.32333332, 0.3740863, 0.42774117,
                                   0.48333332, 0.5340863, 0.59, 0.64, 0.69225883,
                                   0.75, 0.25666666, 0.3159137, 0.36774117, 0.42,
                                   0.47591373, 0.53, 0.58, 0.6359137, 0.68591374,
                                   0.7366667, 0.79225886, 0.30225885, 0.36, 0.41,
                                   0.46225885, 0.51666665, 0.5759137, 0.62666667, 0.6766667,
                                   0.73, 0.7859137, 0.84, 0.35408628, 0.40774116,
                                   0.45774117, 0.51, 0.56591374, 0.62, 0.67225885,
                                   0.73, 0.78333336, 0.83, 0.88408625, 0.4,
                                   0.45591372, 0.50225884, 0.55408627, 0.6066667, 0.6659137,
                                   0.71666664, 0.7740863, 0.8240863, 0.88, 0.93408626,
                                   0.44591373, 0.49666667, 0.55225885, 0.60225886, 0.66,
                                   0.71, 0.7622588, 0.82, 0.87, 0.92225885,
                                   0.9766667, 0.49, 0.54225886, 0.6, 0.6533333,
                                   0.7040863, 0.76, 0.81333333, 0.8640863, 0.9140863,
                                   0.97, 1.0259137, 0.5366667, 0.58666664, 0.6422588,
                                   0.69225883, 0.75, 0.80225885, 0.86, 0.9140863,
                                   0.9633333, 1.0140862, 1.0733334, 0.5822588, 0.64,
                                   0.69, 0.7366667, 0.7959137, 0.8466667, 0.9059137,
                                   0.95666665, 1.01, 1.0659137, 1.1122588, 0.63,
                                   0.68774116, 0.74, 0.79, 0.84, 0.8922588,
                                   0.95, 1.0040863, 1.0540863, 1.11, 1.1677412,
                                   0.67225885, 0.73, 0.7840863, 0.83774114, 0.89,
                                   0.94408625, 0.99774116, 1.0533333, 1.1, 1.1559137,
                                   1.21])

        assert numpy.allclose(Z, Z_exact) or numpy.allclose(Z, Z_exact_win)

        #os.remove('PointData_test_ll.tif')

    def test_tif_lat_lon_too_small(self):

        import os
        import numpy
        from anuga.file_conversion.tif2point_values import tif2point_values

        # makes a file Point_Data_test_ll.tif
        # which contains lat lon data
        make_a_ll_tif()

        x = numpy.linspace(307000., 310000., 11)
        y = numpy.linspace(6190000., 6200000., 11)
        xG, yG = numpy.meshgrid(x, y)
        xG = xG.flatten()
        yG = yG.flatten()
        points = numpy.vstack((xG,yG)).T

        try:
            Z = tif2point_values('PointData_test_ll.tif', zone=56, south=True, points = points) 
        except ValueError:
            pass
        else:
            #Expected ValueError
            raise Exception()       

    def test_tif2point_values_utm(self):

        import os
        import numpy
        from anuga.file_conversion.tif2point_values import tif2point_values

        # makes a file Point_Data_test_utm.tif
        # which contains utm data in bounds
        # x = numpy.linspace(307000., 307100., 101)
        # y = numpy.linspace(6193000., 6193100., 101)
        make_a_utm_tif(south=True)

        # Use Make_Geotif to make tif file
        # Pick a domain that makes sense in EPSG:32756
        # WGS 84 / UTM zone 56 South
        x = numpy.linspace(307000., 307100., 11)
        y = numpy.linspace(6193000., 6193100., 11)
        xG, yG = numpy.meshgrid(x, y)
        xG = xG.flatten()
        yG = yG.flatten()
        points = numpy.vstack((xG,yG)).T
        Z = tif2point_values('PointData_test_utm.tif', zone=56, south=True, points = points)

        #pprint(Z)
        Z_exact = numpy.array([0.,  10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 100.,
                               10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 100., 110.,
                               20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 100., 110., 120.,
                               30.,  40.,  50.,  60.,  70.,  80.,  90., 100., 110., 120., 130.,
                               40.,  50.,  60.,  70.,  80.,  90., 100., 110., 120., 130., 140.,
                               50.,  60.,  70.,  80.,  90., 100., 110., 120., 130., 140., 150.,
                               60.,  70.,  80.,  90., 100., 110., 120., 130., 140., 150., 160.,
                               70.,  80.,  90., 100., 110., 120., 130., 140., 150., 160., 170.,
                               80.,  90., 100., 110., 120., 130., 140., 150., 160., 170., 180.,
                               90., 100., 110., 120., 130., 140., 150., 160., 170., 180., 190.,
                               100., 110., 120., 130., 140., 150., 160., 170., 180., 190., 200.])

        assert numpy.allclose(Z, Z_exact)

        os.remove('PointData_test_utm.tif')

    def test_tif2point_values_utm_wrong_hemisphere(self):

        import os
        import numpy
        from anuga.file_conversion.tif2point_values import tif2point_values

        # makes a file Point_Data_test_utm.tif
        # which contains utm data in bounds
        # southern hemisphere
        # x = numpy.linspace(307000., 307100., 101)
        # y = numpy.linspace(6193000., 6193100., 101)
        make_a_utm_tif(south=True)

        # Use Make_Geotif to make tif file
        # Pick a domain that makes sense in EPSG:32656
        # WGS 84 / UTM zone 56 North
        x = numpy.linspace(307000., 307100., 11)
        y = numpy.linspace(6193000., 6193100., 11)
        xG, yG = numpy.meshgrid(x, y)
        xG = xG.flatten()
        yG = yG.flatten()
        points = numpy.vstack((xG,yG)).T

        try:
            Z = tif2point_values('PointData_test_utm.tif', zone=56, south=False, points = points)
        except:
            pass
        else:
            # Expected Exception as tif is southern hemisphere, tif2point_values called with south=False
            raise Exception()

        os.remove('PointData_test_utm.tif')


#################################################################################
if __name__ == "__main__":
    suite = unittest.makeSuite(Test_tif2, 'test')
    runner = unittest.TextTestRunner(verbosity=1)
    runner.run(suite)